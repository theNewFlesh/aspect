{% macro bower(filepath) -%}
{##}{{ url_for('static', filename='bower_components/' + filepath) }}
{%- endmacro %}
<script src="{{ bower('jquery/dist/jquery.min.js') }}"></script>
<script src="{{ bower('bootstrap/dist/js/bootstrap.min.js') }}"></script>
<script src="{{ bower('patternfly/dist/js/patternfly.min.js') }}"></script>
<script src="{{ bower('plotly.js/dist/plotly.min.js') }}"></script>

<script>
// ---UTILS---------------------------------------------------------------------
function clearChildren (node) {
    while (node.hasChildNodes()) {
        node.removeChild(node.lastChild);
    };
};

function addChildren (node, children) {
    for (var i=0; i < children.length; i++) {
        node.appendChild(children[i]);
    };
};

function contains(item, arr) {
    var i = arr.length;
    while (i--) {
        if (arr[i] === item) return true;
    };
    return false;
};

function dictContains(item, dict) {
    var arr = Object.keys(dict);
    var i = arr.length;
    while (i--) {
        if (arr[i] === item) return true;
    };
    return false;
};

function undefinedError(item) {
    if (item == undefined) {
        throw 'undefined value';
    };
};

function testFunc(a, b="banana") {
    var output = [a,b];
    return output;
};

// ---LIBRARY-------------------------------------------------------------------
var LIBRARY = {{ library | tojson }};

function libraryToList(lib) {
    items = [];
    for (key in lib) {
        var temp = key.split('.');
        for (var i=0; i < temp.length; i++) {
            items.push( temp.slice(0, i+1).join('.') );
        };
    };
    items = [...new Set(items)];
    items.sort();
    return items;
};

function cursorToLibraryList(cursor) {
    var lib = libraryToList(LIBRARY);
    var output = [];
    for (i in lib) {
        var item = lib[i];
        if (item.includes(cursor)) {
            if (item != cursor) {
                output.push(item);
            };
        };
    };
    return output;
};

// ---ROW-----------------------------------------------------------------------
function toTreeRow(item, parent, value, icon, data_parent=true) {
    var row = document.createElement('tr');
    var name = '';
    if (data_parent) {
        row.setAttribute('data-parent', '#' + parent);
        name = item['name'];
        row.id = parent + '-' + name;
    } else {
        row.id = parent;
        name = parent;
    };

    var key = document.createElement('td');
    key.classList.add('treegrid-node');
    key.id = 'sidebar-key';

    var span = document.createElement('span');
    span.classList.add('treegrid-node');
    span.classList.add('icon');
    span.classList.add('node-icon');
    span.classList.add('fa');
    span.classList.add(icon);

    key.appendChild(span);

    var text = document.createElement('span');
    text.textContent = name;
    key.appendChild(text);

    var val = document.createElement('td');
    val.id = 'sidebar-value';
    val.textContent = value;

    row.appendChild(key);
    row.appendChild(val);

    return row;
};

// ---FUNCTION------------------------------------------------------------------
function toTreeFunction(func, parent, icon) {
    undefinedError(parent);

    var row = toTreeRow(func, parent, '', icon);
    var output = [row];
    parent = parent + '-' + func['name'];
    // console.log('function: '+ parent);

    if (dictContains('args', func)) {
        for (i in func['args']) {
            var arg = func['args'][i];
            arg = toTreeRow(
                arg, parent, arg['value'], 'fa-asterisk'
            );
            output.push(arg);
        };
    };

    if (dictContains('kwargs', func)) {
        for (i in func['kwargs']) {
            var kwarg = func['kwargs'][i];
            kwarg = toTreeRow(
                kwarg, parent, kwarg['default'], 'fa-check-square'
            );
            output.push(kwarg);
        };
    };
    return output;
};

// ---CLASS---------------------------------------------------------------------
function toTreeClass(cls, parent) {
    var row = toTreeRow(cls, parent, '', 'fa-cogs');
    var output = [row];

    parent = parent + '-' + cls['name'];
    // console.log('class: '+ parent);

    if (dictContains('methods', cls)) {
        for (i in cls['methods']) {
            var method = cls['methods'][i];
            var method = toTreeFunction(method, parent, 'fa-cog');
            output = output.concat(method);
        };
    };

    if (dictContains('attributes', cls)) {
        for (i in cls['attributes']) {
            var attribute = cls['attributes'][i];
            var attribute = toTreeRow(
                attribute, parent, attribute['value'], 'fa-flag-o'
            );
            output.push(attribute);
        };
    };
    return output;
};

// ---MODULE--------------------------------------------------------------------
function toTreeModule(module, parent) {
    var row = toTreeRow(
            module, parent, '', 'fa-file', data_parent=false
    );
    var output = [row];

    if (dictContains('classes', module)) {
        for (i in module['classes']) {
            var cls = module['classes'][i];
            cls = toTreeClass(cls, parent);
            output = output.concat(cls);
        };
    };

    if (dictContains('functions', module)) {
        for (i in module['functions']) {
            var func = module['functions'][i];
            func = toTreeFunction(func, parent, 'fa-circle-thin');
            output = output.concat(func);
        };
    };

    if (dictContains('variables', module)) {
        for (i in module['variables']) {
            var variable = module['variables'][i];
            variable = toTreeRow(variable, parent, variable['value'], 'fa-flag');
            output.push(variable);
        };
    };
    return output;
};

// ---SIDEBAR-------------------------------------------------------------------
function toggleSidebar() {
    var right = $("#right")[0];
    var left = $("#left")[0];
    var sidebarIcon = $("#sidebar-icon")[0];
    if (right.style.display === 'none') {
        right.style.display = 'block';
        left.style.width = "70%";
        sidebarIcon.className = "fa fa-caret-right fa-2x"
    } else {
        right.style.display = 'none';
        left.style.width = "100%";
        sidebarIcon.className = "fa fa-caret-left fa-2x"
    }
};

function refreshSidebar(cursor, destination) {
    if (destination != '') {
        cursor = cursor + '.' + destination;
    };

    var lib = cursorToLibraryList(cursor);
    var body = document.getElementById('sidebar-body');
    clearChildren(body);

    for (i in lib) {
        var moduleName = lib[i];
        // var parent = moduleName.split('.').slice(-1)[0];
        var parent = moduleName.split('.').join('-');
        if (moduleName != undefined) {
            if ( dictContains(moduleName, LIBRARY) ) {
                var module = toTreeModule(LIBRARY[moduleName], parent);
                addChildren(body, module);
            };
        };
    };

    // Init treegrid
    $('.table-treegrid').treegrid();
};

// ---SEARCHBAR-----------------------------------------------------------------
function refreshSearchbar(cursor, destination) {
    if (destination != '') {
        cursor = cursor + '.' + destination;
    };

    // clear searchbar's library items
    var searchbarLib = document.getElementById('library');
    searchbarLib.value = '';
    clearChildren(searchbarLib);

    var lib = cursorToLibraryList(cursor);

    for (i in lib) {
        var option = document.createElement('option');
        option.id = "searchbar-item";
        option.value = lib[i].replace(cursor + '.', '');
        searchbarLib.appendChild(option);
    };

    // clear input text and update placeholder
    var searchbar = document.getElementById('searchbar');
    searchbar.placeholder = 'search ' + cursor;
    searchbar.value = '';
};

// ---BREADCRUMB----------------------------------------------------------------
function setBreadcrumbItemLink(e) {
    var cursor = e.srcElement.getAttribute('data-cursor');
    _refreshApp(cursor, '');
};

function refreshBreadcrumb(cursor, destination) {
    if (destination != '') {
        cursor = cursor + '.' + destination;
    };

    var breadcrumb = document.getElementById('breadcrumb-nav');
    clearChildren(breadcrumb);

    var items = [];
    if (cursor != '') {
        items = cursor.split('.');
    };

    for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var element = document.createElement('li');
        element.classList.add('breadcrumb-item');

        var a = document.createElement('a');
        a.textContent = item;
        a.setAttribute( 'data-cursor', items.slice(0, i+1).join('.') );
        a.setAttribute('onclick', 'setBreadcrumbItemLink(event)');
        element.appendChild(a);
        breadcrumb.appendChild(element);

        if (i == items.length - 1) {
            element.classList.add('active');
            a.removeAttribute('onclick');
        };
    };

    // ol cannot be empty for proper display
    var empty = document.createElement('li')
    empty.id = "breadcrumb-last-dot";
    breadcrumb.appendChild(empty);

    // set new cursor
    breadcrumb.setAttribute('data-cursor', cursor);
};

// ---APP-----------------------------------------------------------------------
function _refreshApp(cursor, destination) {
    refreshBreadcrumb(cursor, destination);
    refreshSearchbar(cursor, destination);
    refreshSidebar(cursor, destination);
}

function refreshApp(e) {
    var keys = ['Enter']; //, '.'];
    if (contains(e.key, keys)) {
        var destination = document.getElementById('searchbar').value;
        var cursor = document.getElementById('breadcrumb-nav').getAttribute('data-cursor');
        if ( contains(cursor, libraryToList(LIBRARY)) ) {
            _refreshApp(cursor, destination);
        };
    };
};

// ---MAIN----------------------------------------------------------------------
$("#menu-toggle").click(function(e) {
  e.preventDefault();
  $("#wrapper").toggleClass("toggled");
});
// -----------------------------------------------------------------------------

function main() {
    var breadcrumb = document.getElementById('breadcrumb-nav');
    var cursor = libraryToList(LIBRARY)[0];
    breadcrumb.setAttribute('data-cursor', cursor);
    _refreshApp(cursor, '');
};

$(document).ready(function(){
    main();
});
</script>
