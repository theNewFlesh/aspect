{% macro bower(filepath) -%}
{##}{{ url_for('static', filename='bower_components/' + filepath) }}
{%- endmacro %}
<script src="{{ bower('jquery/dist/jquery.min.js') }}"></script>
<script src="{{ bower('bootstrap/dist/js/bootstrap.min.js') }}"></script>
<script src="{{ bower('patternfly/dist/js/patternfly.min.js') }}"></script>
<script src="{{ bower('plotly.js/dist/plotly.min.js') }}"></script>

<script>

// ---UTILS---------------------------------------------------------------------
function clearChildren (node) {
    /**
        Removes all children of given node
        @function
        @param {element} node - element with removeChild function
        @return {undefined}
    **/
    while (node.hasChildNodes()) {
        node.removeChild(node.lastChild);
    };
};

function addChildren (node, children) {
    /**
        Adds children to given nodes' children
        @function
        @param {element} node - element with appendChild function
        @param {Array} children - array of child elements
        @return {undefined}
    **/
    for (var i=0; i < children.length; i++) {
        node.appendChild(children[i]);
    };
};

function contains(item, arr) {
    /**
        Determines a given array contains a given item
        @function
        @param {Object} item - item to look for
        @param {Array} arr - array to look in
        @return {boolean}
    **/
    undefinedError(item);

    for (i in arr) {
        if (arr[i] == item) return true;
    };
    return false;
};

function dictContains(item, dict) {
    /**
        Determines a given dictionary keys contain a given item
        @function
        @param {} item - item to look for
        @param {Object} dict - object to be called with Object.keys
        @return {boolean}
    **/
    undefinedError(item);

    var keys = Object.keys(dict);
    for (i in keys) {
        if (keys[i] == item) return true;
    };
    return false;
};

function undefinedError(item) {
    /**
        Throws a error if given item is undefined
        @function
        @param {Object} item - item to be checked
        @throws undefined value
    **/
    if (item == undefined) {
        throw 'undefined value';
    };
};

function toKwarg(parameter, default_) {
    /**
        Returns default value if parameter is undefined
        @function
        @param {} parameter - item to be checked
        @param {} default_ - default value to be returned
        @return {} parameter or default_
    **/
    if (parameter == undefined) {
        return default_;
    };
    return parameter;
};

/** Dictionary of python object: fa icon pairs used by Tree functions **/
var ICONS = {
    // 'module': 'fa-file',
    // 'class': 'fa-cogs',
    // 'method': 'fa-cog',
    'attribute': 'fa-flag-o',
    // 'function': 'fa-circle-thin',
    'arg': 'fa-asterisk',
    'kwarg': 'fa-check-square',
    'variable': 'fa-flag'
};

// ---LIBRARY-------------------------------------------------------------------
/** Dict of all module of a library exposed by aspect **/
var LIBRARY = {{ library | tojson }};

function libraryToList(lib, modules=true, classes=false) {
    /**
        Converts a library dictionary to an array of full module names (ie lib.pkg.pkg.module)
        @function
        @param {Object} lib - library dictionary
        @param {boolean, opt} modules - include library module
        @param {boolean, opt} classes - include library classes
        @return {Array} - list of fullpaths to library modules and/or classes
    **/
    modules = toKwarg(modules, true);
    classes = toKwarg(classes, false);
    // -------------------------------------------------------------------------

    items = [];
    for (key in lib) {
        // include modules
        if (modules) {
            var temp = key.split('.');
            for (var i=0; i < temp.length; i++) {
                items.push( temp.slice(0, i+1).join('.') );
            };
        };

        // include classes
        if (classes) {
            if (dictContains('classes', lib[key]) ) {
                var cls = lib[key]['classes'];
                for (i in cls) {
                    items.push(key + '.' + cls[i]['name']);
                };
            };
        };
    };

    // make unique and sort alphabetically
    items = [...new Set(items)];
    items.sort();
    return items;
};

function cursorToLibraryList(cursor) {
    /**
        Returns a list of library fullpath modules that reside under cursor location
        @function
        @param {string} cursor - library item fullpath (ie lib.pkg.module)
        @return {} parameter or default
    **/
    var lib = libraryToList(LIBRARY);
    var output = [];
    for (i in lib) {
        var item = lib[i];
        if (item.includes(cursor)) {
            // calling LIBRARY directly excludes classes
            if (item != cursor || dictContains(item, LIBRARY) ) {
                output.push(item);
            };
        };
    };
    return output;
};

// ---ROW-----------------------------------------------------------------------
function toTreeRow(item, parent, value, icon, dataParent=true, iconType='') {
    /**
        Returns a table row object formated for Patternfly's TreeGrid library
        @function
        @param {Object} item - dictionary of row attributes (name, etc)
        @param {string} parent - id of parent TreeGrid element
        @param {} value - value of item
        @param {string} icon - name of fa icon to use (ie fa-asterisk)
        @param {boolean} dataParent - whether row item has a TreeGrid parent element
        @param {string} iconType - the python item type (ie module, class, function, etc)
        @return {} parameter or default
    **/
    dataParent = toKwarg(dataParent, true);
    iconType = toKwarg(iconType, null);
    // -------------------------------------------------------------------------

    var row = document.createElement('tr');
    var name = '';

    if (dataParent) {
        row.setAttribute('data-parent', '#' + parent);
        name = item['name'];
        row.id = parent + '-' + name;
    } else {
        row.id = parent;
        name = parent.split('-').slice(-1)[0];
    };

    // key cell (left side)
    var key = document.createElement('td');
    key.classList.add('treegrid-node');
    key.id = 'sidebar-key';

    // key cell icon
    var span = document.createElement('span');
    span.classList.add('treegrid-node');

    // add icon
    if (icon != null) {
        span.classList.add('icon');
        span.classList.add('node-icon');
        span.classList.add('fa');
        span.classList.add(icon);
    };
    span.setAttribute('data-icon-type', iconType);

    key.appendChild(span);

    // key cell text
    var text = document.createElement('span');
    text.textContent = name;
    key.appendChild(text);

    // value cell (right side)
    var val = document.createElement('td');
    val.id = 'sidebar-value';
    val.textContent = value;

    // full TreeGrid row
    row.appendChild(key);
    row.appendChild(val);

    return row;
};

// ---FUNCTION------------------------------------------------------------------
function toTreeFunction(func, parent, icon) {
    /**
        Returns a list of TreeGrid rows representins a python function (awgs, kwargs)
        @function
        @param {Object} func - python function dictionary
        @param {string} parent - id of parent TreeGrid element
        @param {string} icon - type of fa icon (ie fa-asterisk)
        @return {Array} - list of row elements
    **/
    undefinedError(parent);
    // -------------------------------------------------------------------------

    // function row
    var row = toTreeRow(
        func,
        parent,
        '',
        icon,
        dataParent=true,
        iconType='function'
    );

    // function row's id
    var output = [row];
    parent = parent + '-' + func['name'];

    // add arg rows
    if (dictContains('args', func)) {
        for (i in func['args']) {
            var arg = func['args'][i];

            arg = toTreeRow(
                arg,
                parent,
                arg['value'],
                ICONS['arg'],
                dataParent=true,
                iconType='arg'
            );

            output.push(arg);
        };
    };

    // add kwarg rows
    if (dictContains('kwargs', func)) {
        for (i in func['kwargs']) {
            var kwarg = func['kwargs'][i];

            kwarg = toTreeRow(
                kwarg,
                parent,
                kwarg['default'],
                ICONS['kwarg'],
                dataParent=true,
                iconType='kwarg'
            );

            output.push(kwarg);
        };
    };
    return output;
};

// ---CLASS---------------------------------------------------------------------
function toTreeClass(cls, parent) {
    /**
        Returns a list of TreeGrid rows representins a python class (methods, attributes)
        @function
        @param {Object} cls - python class dictionary
        @param {string} parent - id of parent TreeGrid element
        @return {Array} - list of row elements
    **/
    // class row
    var row = toTreeRow(
        cls,
        parent,
        '',
        ICONS['class'],
        dataParent=true,
        iconType='class'
    );

    // class row's id
    var output = [row];
    parent = parent + '-' + cls['name'];

    // add method rows
    if (dictContains('methods', cls)) {
        for (i in cls['methods']) {
            var method = cls['methods'][i];

            // same as function with different icon
            var method = toTreeFunction(method, parent, ICONS['method']);
            output = output.concat(method);
        };
    };

    // add attribute rows
    if (dictContains('attributes', cls)) {
        for (i in cls['attributes']) {
            var attribute = cls['attributes'][i];
            var attribute = toTreeRow(
                attribute,
                parent,
                attribute['value'],
                ICONS['attribute'],
                dataParent=true,
                iconType='attribute'
            );

            output.push(attribute);
        };
    };
    return output;
};

// ---MODULE--------------------------------------------------------------------
function toTreeModule(module, parent) {
    /**
        Returns a list of TreeGrid rows representins a python module (class, variables)
        @function
        @param {Object} cls - python class dictionary
        @param {string} parent - id of parent TreeGrid element
        @return {Array} - list of row elements
    **/
    // module row
    var row = toTreeRow(
        module,
        parent,
        '',
        ICONS['module'],
        dataParent=false,
        iconType='module'
    );
    var output = [row];

    // class rows
    if (dictContains('classes', module)) {
        for (i in module['classes']) {
            var cls = module['classes'][i];
            cls = toTreeClass(cls, parent);
            output = output.concat(cls);
        };
    };

    // function rows
    if (dictContains('functions', module)) {
        for (i in module['functions']) {
            var func = module['functions'][i];
            func = toTreeFunction(func, parent, ICONS['function']);
            output = output.concat(func);
        };
    };

    // variable rows
    if (dictContains('variables', module)) {
        for (i in module['variables']) {
            var variable = module['variables'][i];

            variable = toTreeRow(
                variable,
                parent,
                variable['value'],
                ICONS['variable'],
                dataParent=true,
                iconType='variable'
            );

            output.push(variable);
        };
    };
    return output;
};

// ---SIDEBAR-------------------------------------------------------------------
function toggleSidebar() {
    /**
        Toggles right side bar display and #left ad #rigtht widths
        @function
        @return {undefined}
    **/
    var right = $("#right")[0];
    var left = $("#left")[0];
    var sidebarIcon = $("#sidebar-icon")[0];

    // display right sidebar
    if (right.style.display === 'none') {
        right.style.display = 'block';
        left.style.width = "70%";
        sidebarIcon.className = "fa fa-caret-right fa-2x"

    // hide right sidebar
    } else {
        right.style.display = 'none';
        left.style.width = "100%";
        sidebarIcon.className = "fa fa-caret-left fa-2x"
    }
};

function refreshSidebar(cursor, destination) {
    /**
        Refreshes sidebar TreeGrid table
        @function
        @param {string} cursor - fullpath to a key in LIBRARY (ie lib.pkg.module)
        @param {string} destination - partial path to python modules in LIBRARY
                                      given cursor position (ie pkg.module)
        @return {undefined}
    **/
    // append destination to cursor
    if (destination != '') {
        cursor = cursor + '.' + destination;
    };

    // get new list of modules given new cursor
    var lib = cursorToLibraryList(cursor);

    // clear current TreeGrid
    var body = document.getElementById('sidebar-body');
    clearChildren(body);

    // append new modules to TreeGrid
    for (i in lib) {
        var moduleName = lib[i];
        var parent = moduleName.split('.').join('-');
        if (moduleName != undefined) {

            // don't include module paths not in LIBRARY
            if ( dictContains(moduleName, LIBRARY) ) {
                var module = toTreeModule(LIBRARY[moduleName], parent);
                addChildren(body, module);
            };
        };
    };

    // initialize treegrid
    $('.table-treegrid').treegrid();
};

// ---SEARCHBAR-----------------------------------------------------------------
function refreshSearchbar(cursor, destination) {
    /**
        Clears searchbar, updates placeholder and library items
        @function
        @param {string} cursor - fullpath to a key in LIBRARY (ie lib.pkg.module)
        @param {string} destination - partial path to python modules in LIBRARY
                                      given cursor position (ie pkg.module)
        @return {undefined}
    **/
    // append destination to cursor
    if (destination != '') {
        cursor = cursor + '.' + destination;
    };

    // clear searchbar's library items
    var searchbarLib = document.getElementById('library');
    searchbarLib.value = '';
    clearChildren(searchbarLib);

    // get new library items given new cursor
    var lib = cursorToLibraryList(cursor);

    // skips if cursor is at module level
    if ( !dictContains(cursor, LIBRARY) ) {
        for (i in lib) {
            var option = document.createElement('option');
            option.id = "searchbar-item";

            // make path relative to new cursor
            option.value = lib[i].replace(cursor + '.', '');
            searchbarLib.appendChild(option);
        };
    };

    // clear input text and update placeholder
    var searchbar = document.getElementById('searchbar');
    searchbar.placeholder = 'search ' + cursor.split('.').slice(-1)[0];
    searchbar.value = '';
};

// ---BREADCRUMB----------------------------------------------------------------
function setBreadcrumbItemLink(e) {
    /**
        Event listener for breadcrumb links, calls _refreshApp with new cursor
        @function
        @param {event} e - event object used to derive new cursor
        @return {Array} - list of row elements
    **/
    var cursor = e.srcElement.getAttribute('data-cursor');
    _refreshApp(cursor, '');
};

function refreshBreadcrumb(cursor, destination) {
    /**
        Clears the breadcrumb and then populates with new library location
        @function
        @param {string} cursor - fullpath to a key in LIBRARY (ie lib.pkg.module)
        @param {string} destination - partial path to python modules in LIBRARY
                                      given cursor position (ie pkg.module)
        @return {Array} - list of row elements
    **/
    if (destination != '') {
        cursor = cursor + '.' + destination;
    };

    var breadcrumb = document.getElementById('breadcrumb-nav');
    clearChildren(breadcrumb);

    var items = [];
    if (cursor != '') {
        items = cursor.split('.');
    };

    for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var element = document.createElement('li');
        element.classList.add('breadcrumb-item');

        var a = document.createElement('a');
        a.textContent = item;
        a.setAttribute( 'data-cursor', items.slice(0, i+1).join('.') );
        a.setAttribute('onclick', 'setBreadcrumbItemLink(event)');
        element.appendChild(a);
        breadcrumb.appendChild(element);

        if (i == items.length - 1) {
            element.classList.add('active');
            a.removeAttribute('onclick');
        };
    };

    // ol cannot be empty for proper display
    var empty = document.createElement('li')
    empty.id = "breadcrumb-last-dot";
    breadcrumb.appendChild(empty);

    // set new cursor
    breadcrumb.setAttribute('data-cursor', cursor);
};

// ---APP-----------------------------------------------------------------------
function _refreshApp(cursor, destination) {
    /**
        Clears all interactive elements relevant to library navigation
          - breadcrumb
          - searchbar
          - sidebar
        @function
        @param {string} cursor - fullpath to a key in LIBRARY (ie lib.pkg.module)
        @param {string} destination - partial path to python modules in LIBRARY
                                      given cursor position (ie pkg.module)
        @return {undefined}
    **/
    refreshBreadcrumb(cursor, destination);
    refreshSearchbar(cursor, destination);
    refreshSidebar(cursor, destination);
}

function refreshApp(e) {
    /**
        Event listener that calls _refreshApp upon enter key and valid cursor
        @function
        @param {event} e - event object used to signal a call attempt
        @return {undefined}
    **/
    var keys = ['Enter']; //, '.'];
    if (contains(e.key, keys)) {
        var destination = document.getElementById('searchbar').value;
        var cursor = document.getElementById('breadcrumb-nav').getAttribute('data-cursor');
        var newCursor = cursor + '.' + destination;

        // if new cursor is a valid path in python library
        if ( contains(newCursor, libraryToList(LIBRARY)) ) {
            _refreshApp(cursor, destination);
        };
    };
};

// ---MAIN----------------------------------------------------------------------
function main() {
    /**
        Calls _refreshApp when page is loaded
        @function
        @return {undefined}
    **/
    var breadcrumb = document.getElementById('breadcrumb-nav');
    var cursor = libraryToList(LIBRARY)[0];
    breadcrumb.setAttribute('data-cursor', cursor);
    _refreshApp(cursor, '');
};

$(document).ready(function(){
    main();
});
</script>
