{% macro bower(filepath) -%}
{##}{{ url_for('static', filename='bower_components/' + filepath) }}
{%- endmacro %}
{% macro node(filepath) -%}
{##}{{ url_for('static', filename='node_modules/' + filepath) }}
{%- endmacro %}

{% block dependencies %}
<!-- dependencies -->
<script src="{{ node('lodash/lodash.min.js') }}"></script>
<script src="{{ bower('jquery/dist/jquery.min.js') }}"></script>
<script src="{{ bower('jquery-resizable/dist/jquery-resizable.min.js') }}"></script>
<script src="{{ bower('bootstrap/dist/js/bootstrap.min.js') }}"></script>
<script src="{{ bower('bootstrap-switch/dist/js/bootstrap-switch.min.js') }}"></script>
<script src="{{ bower('bootstrap-select/dist/js/bootstrap-select.min.js') }}"></script>
<script src="{{ bower('seiyria-bootstrap-slider/dist/bootstrap-slider.min.js') }}"></script>
<script src="{{ bower('patternfly/dist/js/patternfly.min.js') }}"></script>
<script src="{{ bower('patternfly-bootstrap-combobox/js/bootstrap-combobox.js') }}"></script>
<script src="{{ bower('jsoneditor/dist/jsoneditor.min.js') }}"></script>
<script src="{{ bower('plotly.js/dist/plotly.min.js') }}"></script>
{% endblock %}

{% block aspect_js %}
<!-- aspect.js -->
<script>
/**
The Aspect.js module is responsible for handling the client display and
request functionality of aspect.
@module aspect.js
**/

// ---UTILS---------------------------------------------------------------------
function clearChildren (node) {
    /**
        Removes all children of given node
        @function
        @param {element} node - element with removeChild function
        @return {undefined}
    **/
    while (node.hasChildNodes()) {
        node.removeChild(node.lastChild);
    }
}

function addChildren (node, children) {
    /**
        Adds children to given nodes' children
        @function
        @param {element} node - element with appendChild function
        @param {Array} children - array of child elements
        @return {undefined}
    **/
    for (var i=0; i < children.length; i++) {
        node.appendChild(children[i]);
    }
}

function undefinedError(item) {
    /**
        Throws a error if given item is undefined
        @function
        @param {Object} item - item to be checked
        @throws undefined value
    **/
    if (item == undefined) {
        throw 'undefined value';
    }
}

function toKwarg(parameter, default_) {
    /**
        Returns default value if parameter is undefined
        @function
        @param {} parameter - item to be checked
        @param {} default_ - default value to be returned
        @return {} parameter or default_
    **/
    if (parameter == undefined) {
        return default_;
    }
    return parameter;
}

/** Dictionary of python object: fa icon pairs used by Tree functions **/
var ICONS = {
    // 'module': 'fa-file',
    // 'class': 'fa-cogs',
    // 'method': 'fa-cog',
    'attribute': 'fa-flag-o',
    // 'function': 'fa-circle-thin',
    'arg': 'fa-asterisk',
    'kwarg': 'fa-check-square',
    'variable': 'fa-flag'
};

/** Dictionary of of widget elements: element id, element **/
var WIDGETS = {};

/** Dict of all module of a library exposed by aspect **/
var LIBRARY = {{ library | tojson }}

/** Dict of all widgets parameters: widget id: parameter dict **/
var PARAMETERS = {};

// ---WIDGETS-------------------------------------------------------------------
function getParameter(widget) {
    var paramType = widget['data-parameter-type'];

    var temp = widget.id;
    temp = _.replace(temp, '-widget', '');
    temp = _.split(temp, '-');

    var id = null;
    for (i=temp.length; i > 0; i--) {
        id = _.join(_.slice(temp, 0, i), '.');
        if (_.has(LIBRARY, id)) {
            break;
        }
    }

    if (id == null) {
        throw('LIBRARY id not found: ' + widget.id);
    }

    if (!_.has(PARAMETERS, id)) {
        // copy library value
        PARAMETERS[id] = Object.assign({}, LIBRARY[id]);
    }
    return PARAMETERS[id];
}

function createFloatWidget(id, value, min=0, max=10, step=0.1) {
    /**
        Creates a bootstrap-slider widget
        @function
        @param {string} id - id of widget
        @param {number} value - default value
        @param {number, opt} min - minimum value for slider
        @param {number, opt} max - maximum value for slider
        @param {step, opt} min - step value for slider
        @return {input} - slider element
    **/
    min = toKwarg(min, 0);
    max = toKwarg(max, 10);
    step = toKwarg(step, 0.1);
    value = toKwarg(value, 5);

    var widget = document.createElement('input');
    widget.id = id;
    widget.value = value;
    widget.classList.add('bootstrap-slider');
    widget.setAttribute('data-provide', 'slider');
    widget.setAttribute('data-slider-id', '#' + id);
    widget.setAttribute('data-slider-handle', 'custom');
    widget.setAttribute('data-slider-min', String(min));
    widget.setAttribute('data-slider-max', String(max));
    widget.setAttribute('data-slider-step', String(step));

    return widget;
}

function createTextArea(id, value) {
    /**
        Creates a text area widget
        @function
        @param {string} id - id of widget
        @param {string} value - default value
        @return {textarea} - textarea element
    **/
    value = toKwarg(value, '');
    var widget = document.createElement('textarea');
    widget.id = id;
    widget.classList.add('form-control');
    widget.setAttribute('rows', '1');
    widget.value = value;
    return widget;
}

function createStringWidget(id, value) {
    /**
        Creates a string editor widget
        @function
        @param {string} id - id of widget
        @param {string} value - default value
        @return {input} - input element
    **/
    value = toKwarg(value, '');
    var widget = document.createElement('input');
    widget.id = id;
    widget.classList.add('sidebar-val-input');
    widget.value = value;
    return widget;
}

function createListWidget(id, value) {
    /**
        Creates a patternfly multiple select dropdown widget
        @function
        @param {string} id - id of widget
        @param {Array} value - default values
        @return {input} - input element
    **/
    value = toKwarg(value, [1,2,3]);
    var widget = document.createElement('select');
    widget.classList.add('selectpicker');
    widget.multiple = 'multiple';
    widget.id = id;
    widget.title = "-";

    for (i in value) {
        var option = document.createElement('option');
        option.value = value[i];
        option.text = String(value[i]);
        widget.appendChild(option);
    }
    return widget;
}

function createComboBoxWidget(id, value) {
    /**
        Creates a bootstrap combobox dropdown widget
        @function
        @param {string} id - id of widget
        @param {Array} value - default values
        @return {input} - input element
    **/
    value = toKwarg(value, [1,2,3]);
    var widget = document.createElement('select');
    widget.classList.add('combobox');
    widget.classList.add('form-control');
    widget.id = id;

    for (i in value) {
        var option = document.createElement('option');
        option.value = value[i];
        option.text = String(value[i]);
        widget.appendChild(option);
    }
    return widget;
}

function boolEvent(e) {
    var widget = e.target;
    var state = $(widget).bootstrapSwitch('state');
    var PARAMETERS = getParameter(widget);
    console.log(PARAMETERS);
}

function createBoolWidget(id, value) {
    /**
        Creates a bootstrap-switch widget
        @function
        @param {string} id - id of widget
        @param {string} value - default value
        @return {input} - switch element
    **/
    var widget = document.createElement('input');
    widget.classList.add('bootstrap-switch');
    widget.id = id;
    widget.type = 'checkbox';
    widget.checked = value;
    widget.setAttribute('data-on-text', 'TRUE');
    widget.setAttribute('data-off-text', 'FALSE');
    widget.setAttribute('onchange', 'boolEvent(event)');
    return widget;
}

function createDictWidget(id, value) {
    /**
        Creates a jsoneditor widget
        @function
        @param {string} id - id of widget
        @param {object} value - default value
        @return {input} - switch element
    **/
    var widget = document.createElement('div');
    widget.classList.add('jsoneditor-container');
    widget.id = id;
    widget.value = value;
    return widget;
}

function registerWidget(parent, value, paramType) {
    /**
        Registers a widget with WIDGETS.  Creates one if it key doesnt exist.
        @function
        @param {string} parent - name of parent element
        @param {} value - default value of widget
        @param {string} paramType - parameter type
        @return {string} - id of widget (key in WIDGETS)
    **/
    var id = parent + '-widget';
    if (!_.includes(WIDGETS, id)) {
        var widget = null;

        if (_.isBoolean(value)) {
            widget = createBoolWidget(id, value);

        } else if (_.isNumber(value)) {
            widget = createFloatWidget(id, value);

        } else if (_.isString(value)) {
            widget = createStringWidget(id, value);

        } else if (_.isArray(value)) {
            widget = createListWidget(id, value);

        } else if (_.isObject(value)) {
         // && value.hasOwnProperty('keys')) {
            widget = createDictWidget(id, value);
        }

        if (widget != null) {
            widget.setAttribute('data-parameter-type', paramType);
            WIDGETS[id] = widget;
        }
    }
    return id;
}

// ---LIBRARY-------------------------------------------------------------------
function libraryToList(lib, modules=true, classes=false) {
    /**
        Converts a library dictionary to an array of full module names (ie lib.pkg.pkg.module)
        @function
        @param {Object} lib - library dictionary
        @param {boolean, opt} modules - include library module
        @param {boolean, opt} classes - include library classes
        @return {Array} - list of fullpaths to library modules and/or classes
    **/
    modules = toKwarg(modules, true);
    classes = toKwarg(classes, false);
    // -------------------------------------------------------------------------

    items = [];
    for (key in lib) {
        // include modules
        if (modules) {
            var temp = key.split('.');
            for (var i=0; i < temp.length; i++) {
                items.push( temp.slice(0, i+1).join('.') );
            }
        }

        // include classes
        if (classes) {
            if (_.has(lib[key], 'classes') ) {
                var cls = lib[key]['classes'];
                for (i in cls) {
                    items.push(key + '.' + cls[i]['name']);
                }
            }
        }
    }

    // make unique and sort alphabetically
    items = [...new Set(items)];
    items.sort();
    return items;
}

function cursorToLibraryList(cursor) {
    /**
        Returns a list of library fullpath modules that reside under cursor location
        @function
        @param {string} cursor - library item fullpath (ie lib.pkg.module)
        @return {} parameter or default
    **/
    var lib = libraryToList(LIBRARY);
    var output = [];
    for (i in lib) {
        var item = lib[i];
        if (item.includes(cursor)) {
            // calling LIBRARY directly excludes classes
            if (item != cursor || _.has(LIBRARY, item) ) {
                output.push(item);
            }
        }
    }
    return output;
}

// ---ROW-----------------------------------------------------------------------
function toTreeRow(item, parent, value, icon, dataParent=true, paramType='') {
    /**
        Returns a table row object formated for Patternfly's TreeGrid library
        @function
        @param {Object} item - dictionary of row attributes (name, etc)
        @param {string} parent - id of parent TreeGrid element
        @param {} value - value of item
        @param {string} icon - name of fa icon to use (ie fa-asterisk)
        @param {boolean} dataParent - whether row item has a TreeGrid parent element
        @param {string} paramType - the parameter item type (ie module, class, function, etc)
        @return {} parameter or default
    **/
    dataParent = toKwarg(dataParent, true);
    paramType = toKwarg(paramType, null);
    value = toKwarg(value, null);
    // -------------------------------------------------------------------------

    var row = document.createElement('tr');
    var name = '';
    var fullname = parent + '-' + name;
    if (dataParent) {
        row.setAttribute('data-parent', '#' + parent);
        name = item['name'];
        row.id = parent + '-' + name;
    } else {
        row.id = parent;
        name = parent.split('-').slice(-1)[0];
    }

    fullname = fullname + name;

    // key cell (left side)
    var key = document.createElement('td');
    key.classList.add('treegrid-node');
    key.id = 'sidebar-key';

    // key cell icon
    var span = document.createElement('span');
    span.classList.add('treegrid-node');

    // add icon
    if (icon != null) {
        span.classList.add('icon');
        span.classList.add('node-icon');
        span.classList.add('fa');
        span.classList.add(icon);
    }
    span.setAttribute('data-icon-type', paramType);

    key.appendChild(span);

    // key cell text
    var text = document.createElement('span');
    text.textContent = name;
    key.appendChild(text);

    // value cell (right side)
    var val = document.createElement('td');
    val.id = 'sidebar-value';
    // val.textContent = value;

    var id = registerWidget(fullname, value, paramType);
    var widget = WIDGETS[id];
    if (widget != undefined) {
        val.appendChild(widget);
    }

    // full TreeGrid row
    row.appendChild(key);
    row.appendChild(val);

    return row;
}

// ---FUNCTION------------------------------------------------------------------
function toTreeFunction(func, parent, icon) {
    /**
        Returns a list of TreeGrid rows representins a python function (awgs, kwargs)
        @function
        @param {Object} func - python function dictionary
        @param {string} parent - id of parent TreeGrid element
        @param {string} icon - type of fa icon (ie fa-asterisk)
        @return {Array} - list of row elements
    **/
    undefinedError(parent);
    // -------------------------------------------------------------------------

    // function row
    var row = toTreeRow(
        func,
        parent,
        null,
        icon,
        dataParent=true,
        paramType='function'
    );

    // function row's id
    var output = [row];
    parent = parent + '-' + func['name'];

    // add arg rows
    if (_.has(func, 'args')) {
        for (i in func['args']) {
            var arg = func['args'][i];

            arg = toTreeRow(
                arg,
                parent,
                arg['value'],
                ICONS['arg'],
                dataParent=true,
                paramType='arg'
            )

            output.push(arg);
        }
    }

    // add kwarg rows
    if (_.has(func, 'kwargs')) {
        for (i in func['kwargs']) {
            var kwarg = func['kwargs'][i];

            kwarg = toTreeRow(
                kwarg,
                parent,
                kwarg['default'],
                ICONS['kwarg'],
                dataParent=true,
                paramType='kwarg'
            )

            output.push(kwarg);
        }
    }
    return output;
}

// ---CLASS---------------------------------------------------------------------
function toTreeClass(cls, parent) {
    /**
        Returns a list of TreeGrid rows representins a python class (methods, attributes)
        @function
        @param {Object} cls - python class dictionary
        @param {string} parent - id of parent TreeGrid element
        @return {Array} - list of row elements
    **/
    // class row
    var row = toTreeRow(
        cls,
        parent,
        null,
        ICONS['class'],
        dataParent=true,
        paramType='class'
    );

    // class row's id
    var output = [row];
    parent = parent + '-' + cls['name'];

    // add method rows
    if (_.has(cls, 'methods')) {
        for (i in cls['methods']) {
            var method = cls['methods'][i];

            // same as function with different icon
            var method = toTreeFunction(method, parent, ICONS['method']);
            output = output.concat(method);
        }
    }

    // add attribute rows
    if (_.has(cls, 'attributes')) {
        for (i in cls['attributes']) {
            var attribute = cls['attributes'][i];
            var attribute = toTreeRow(
                attribute,
                parent,
                attribute['value'],
                ICONS['attribute'],
                dataParent=true,
                paramType='attribute'
            )

            output.push(attribute);
        }
    }
    return output;
}

// ---MODULE--------------------------------------------------------------------
function toTreeModule(module, parent) {
    /**
        Returns a list of TreeGrid rows representins a python module (class, variables)
        @function
        @param {Object} cls - python class dictionary
        @param {string} parent - id of parent TreeGrid element
        @return {Array} - list of row elements
    **/
    // module row
    var row = toTreeRow(
        module,
        parent,
        null,
        ICONS['module'],
        dataParent=false,
        paramType='module'
    );
    var output = [row];

    // class rows
    if (_.has(module, 'classes')) {
        for (i in module['classes']) {
            var cls = module['classes'][i];
            cls = toTreeClass(cls, parent);
            output = output.concat(cls);
        }
    }

    // function rows
    if (_.has(module, 'functions')) {
        for (i in module['functions']) {
            var func = module['functions'][i];
            func = toTreeFunction(func, parent, ICONS['function']);
            output = output.concat(func);
        }
    }

    // variable rows
    if (_.has(module, 'variables')) {
        for (i in module['variables']) {
            var variable = module['variables'][i];

            variable = toTreeRow(
                variable,
                parent,
                variable['value'],
                ICONS['variable'],
                dataParent=true,
                paramType='variable'
            );

            output.push(variable);
        }
    }
    return output;
}

// ---SIDEBAR-------------------------------------------------------------------
function toggleSidebar() {
    /**
        Toggles right side bar display and #left ad #rigtht widths
        @function
        @return {undefined}
    **/
    var right = document.getElementById("right");
    var left = document.getElementById("left");
    var sidebarIcon = document.getElementById("sidebar-icon");

    // display right sidebar
    if (right.style.display === 'none') {
        right.style.display = 'block';
        left.style.width = "65%";
        sidebarIcon.className = "fa fa-caret-right fa-2x"

    // hide right sidebar
    } else {
        right.style.display = 'none';
        left.style.width = "100%";
        sidebarIcon.className = "fa fa-caret-left fa-2x"
    }
}

function toggleJsonEditor(e) {
    var icon = e.target;
    var btn = icon.parentElement;
    var ace = btn.parentElement.parentElement.parentElement;
    ace = ace.children[1].children[0];
    if (ace.style.display == "inline-block") {
        ace.style.display = "none";
        icon.className = "jsoneditor-toggle-button-icon fa fa-caret-down fa-lg";
    } else {
        ace.style.display = "inline-block";
        icon.className = "jsoneditor-toggle-button fa fa-caret-up fa-lg";
    }
}

function refreshDictWidgets() {
    // refresh jsoneditor widgets
    var containers = $('.jsoneditor-container').toArray();
    // var containers = document.getElementsByClassName('jsoneditor');
    for (i in containers) {
        var container = containers[i];
        var value = container.value;
        var editor = new JSONEditor(container, {
            'mode': 'code'
        });
        editor.set(value);

        var button = document.createElement('button');
        button.classList.add('btn');
        button.classList.add('jsoneditor-toggle-button');
        button.setAttribute('onclick', 'toggleJsonEditor(event)');

        var i = document.createElement('i');
        i.className = "jsoneditor-toggle-button-icon fa fa-caret-down fa-lg";
        button.appendChild(i);

        var bcont = document.createElement('div');
        bcont.classList.add("jsoneditor-toggle-container");
        bcont.appendChild(button);

        var menu = container.children[0].children[0];
        menu.appendChild(bcont);
    }
}

function refreshWidgets() {
    // refresh treegrid
    $('.table-treegrid').treegrid();

    // refresh sliders
    $('.bootstrap-slider').slider();

    // refresh switches
    $('.bootstrap-switch').bootstrapSwitch();

    // refresh select widgets
    $('.selectpicker').selectpicker({
        'width': 'auto',
        'liveSearch': true
    });

    // refresh combobox widgets
    // $('.combobox').combobox();

    refreshDictWidgets();
}

function refreshSidebar(cursor, destination) {
    /**
        Refreshes sidebar TreeGrid table
        @function
        @param {string} cursor - fullpath to a key in LIBRARY (ie lib.pkg.module)
        @param {string} destination - partial path to python modules in LIBRARY
                                      given cursor position (ie pkg.module)
        @return {undefined}
    **/
    // append destination to cursor
    if (destination != '') {
        cursor = cursor + '.' + destination;
    }

    // get new list of modules given new cursor
    var lib = cursorToLibraryList(cursor);

    // clear current TreeGrid
    var body = document.getElementById('sidebar-body');
    clearChildren(body);

    // append new modules to TreeGrid
    for (i in lib) {
        var moduleName = lib[i];
        var parent = moduleName.split('.').join('-');
        if (moduleName != undefined) {

            // don't include module paths not in LIBRARY
            if ( _.has(LIBRARY, moduleName) ) {
                var module = toTreeModule(LIBRARY[moduleName], parent);
                addChildren(body, module);
            }
        }
    }

    refreshWidgets();
}

// ---SEARCHBAR-----------------------------------------------------------------
function refreshSearchbar(cursor, destination) {
    /**
        Clears searchbar, updates placeholder and library items
        @function
        @param {string} cursor - fullpath to a key in LIBRARY (ie lib.pkg.module)
        @param {string} destination - partial path to python modules in LIBRARY
                                      given cursor position (ie pkg.module)
        @return {undefined}
    **/
    // append destination to cursor
    if (destination != '') {
        cursor = cursor + '.' + destination;
    }

    // clear searchbar's library items
    var searchbarLib = document.getElementById('library');
    searchbarLib.value = '';
    clearChildren(searchbarLib);

    // get new library items given new cursor
    var lib = cursorToLibraryList(cursor);

    // skips if cursor is at module level
    if ( !_.has(LIBRARY, cursor) ) {
        for (i in lib) {
            var option = document.createElement('option');
            option.id = "searchbar-item";

            // make path relative to new cursor
            option.value = lib[i].replace(cursor + '.', '');
            searchbarLib.appendChild(option);
        }
    }

    // clear input text and update placeholder
    var searchbar = document.getElementById('searchbar');
    searchbar.placeholder = 'search ' + cursor.split('.').slice(-1)[0];
    searchbar.value = '';
}

// ---BREADCRUMB----------------------------------------------------------------
function setBreadcrumbItemLink(e) {
    /**
        Event listener for breadcrumb links, calls _refreshApp with new cursor
        @function
        @param {event} e - event object used to derive new cursor
        @return {Array} - list of row elements
    **/
    var cursor = e.srcElement.getAttribute('data-cursor');
    _refreshApp(cursor, '');
}

function refreshBreadcrumb(cursor, destination) {
    /**
        Clears the breadcrumb and then populates with new library location
        @function
        @param {string} cursor - fullpath to a key in LIBRARY (ie lib.pkg.module)
        @param {string} destination - partial path to python modules in LIBRARY
                                      given cursor position (ie pkg.module)
        @return {Array} - list of row elements
    **/
    if (destination != '') {
        cursor = cursor + '.' + destination;
    }

    var breadcrumb = document.getElementById('breadcrumb-nav');
    clearChildren(breadcrumb);

    var items = [];
    if (cursor != '') {
        items = cursor.split('.');
    }

    for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var element = document.createElement('li');
        element.classList.add('breadcrumb-item');

        var a = document.createElement('a');
        a.textContent = item;
        a.setAttribute( 'data-cursor', items.slice(0, i+1).join('.') );
        a.setAttribute('onclick', 'setBreadcrumbItemLink(event)');
        element.appendChild(a);
        breadcrumb.appendChild(element);

        if (i == items.length - 1) {
            element.classList.add('active');
            a.removeAttribute('onclick');
        }
    }

    // ol cannot be empty for proper display
    var empty = document.createElement('li')
    empty.id = "breadcrumb-last-dot";
    breadcrumb.appendChild(empty);

    // set new cursor
    breadcrumb.setAttribute('data-cursor', cursor);
}

// ---APP-----------------------------------------------------------------------
function refreshLayout() {
    $(".panel-left").resizable({
        handleSelector: ".splitter",
        resizeHeight: false,
        resixeWidthFrom: 'right'
    });
}

function _refreshApp(cursor, destination) {
    /**
        Clears all interactive elements relevant to library navigation
          - breadcrumb
          - searchbar
          - sidebar
        @function
        @param {string} cursor - fullpath to a key in LIBRARY (ie lib.pkg.module)
        @param {string} destination - partial path to python modules in LIBRARY
                                      given cursor position (ie pkg.module)
        @return {undefined}
    **/
    refreshLayout();
    refreshBreadcrumb(cursor, destination);
    refreshSearchbar(cursor, destination);
    refreshSidebar(cursor, destination);
}

function refreshApp(e) {
    /**
        Event listener that calls _refreshApp upon enter key and valid cursor
        @function
        @param {event} e - event object used to signal a call attempt
        @return {undefined}
    **/
    var keys = ['Enter']; //, '.'];
    if (_.includes(keys, e.key)) {
        var destination = document.getElementById('searchbar').value;
        var cursor = document.getElementById('breadcrumb-nav').getAttribute('data-cursor');
        var newCursor = cursor + '.' + destination;

        // if new cursor is a valid path in python library
        if ( _.includes(libraryToList(LIBRARY), newCursor) ) {
            _refreshApp(cursor, destination);
        }
    }
}

// ---MAIN----------------------------------------------------------------------
function main() {
    /**
        Calls _refreshApp when page is loaded
        @function
        @return {undefined}
    **/
    var breadcrumb = document.getElementById('breadcrumb-nav');
    var cursor = libraryToList(LIBRARY)[0];
    breadcrumb.setAttribute('data-cursor', cursor);
    _refreshApp(cursor, '');
}

$(document).ready(function(){
    main();
});
</script>
{% endblock %}
