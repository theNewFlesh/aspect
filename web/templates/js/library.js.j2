/**
The library.js module contains functions for working with the library.
@module library.js
**/

class Library {
    constructor(data) {
        undefinedError(data);
        this._data = data;
    }

    hasKey(key) {
        return _.has(this._data, key);
    }

    get(key) {
        return this._data[key];
    }

    set(key, value) {
        this._data[key] = value;
    }
    // -------------------------------------------------------------------------

    toList(modules=true, classes=false) {
        /**
            Converts a library dictionary to an array of full module names (ie lib.pkg.pkg.module)
            @function
            @param {Object} lib - library dictionary
            @param {boolean, opt} modules - include library module
            @param {boolean, opt} classes - include library classes
            @return {Array} - list of fullpaths to library modules and/or classes
        **/
        modules = toKwarg(modules, true);
        classes = toKwarg(classes, false);
        // ---------------------------------------------------------------------
        var data = this._data;

        var items = [];
        for (var key in data) {
            // include modules
            if (modules) {
                var temp = key.split('.');
                for (var i=0; i < temp.length; i++) {
                    items.push( temp.slice(0, i+1).join('.') );
                }
            }

            // include classes
            if (classes) {
                if (_.has(data[key], 'classes') ) {
                    var cls = data[key]['classes'];
                    for (var i in cls) {
                        items.push(key + '.' + cls[i]['name']);
                    }
                }
            }
        }

        // make unique and sort alphabetically
        items = [...new Set(items)];
        items.sort();
        return items;
    }
    // -------------------------------------------------------------------------

    fromCursor(cursor) {
        /**
            Returns a list of library fullpath modules that reside under cursor location
            @function
            @param {string} cursor - library item fullpath (ie lib.pkg.module)
            @return {} parameter or default
        **/
        var data = this._data;
        var lib = this.toList();
        var output = [];
        for (var i in lib) {
            var item = lib[i];
            if (item.includes(cursor)) {
                // calling data directly excludes classes
                if (item != cursor || _.has(data, item) ) {
                    output.push(item);
                }
            }
        }
        return output;
    }
}
