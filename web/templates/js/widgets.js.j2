/**
The widgets.js module contains all the widgets used by aspect.
@module widgets.js
**/
// -----------------------------------------------------------------------------

class WidgetGenerator {
    constructor(id, value) {
        undefinedError(id);

        this.id = id + '-widget';
        this.value = value;
    }

    _toNumber(min, max, step) {
        /**
            Creates a bootstrap-slider widget
            @function
            @param {string} id - id of widget
            @param {number} value - default value
            @param {number, opt} min - minimum value for slider
            @param {number, opt} max - maximum value for slider
            @param {step, opt} min - step value for slider
            @return {input} - slider element
        **/
        var value = toKwarg(this.value, 5);

        var widget = document.createElement('input');
        widget.id = this.id;
        widget.value = value;
        widget.classList.add('bootstrap-slider');
        widget.setAttribute('data-provide', 'slider');
        widget.setAttribute('data-slider-id', '#' + this.id);
        widget.setAttribute('data-slider-handle', 'custom');
        widget.setAttribute('data-slider-min', String(min));
        widget.setAttribute('data-slider-max', String(max));
        widget.setAttribute('data-slider-step', String(step));

        return widget;
    }

    toFloat(min=0, max=10, step=0.1) {
        min = toKwarg(min, 0);
        max = toKwarg(max, 10);
        step = toKwarg(step, 0.1);

        var widget = this._toNumber(min, max, step);
        widget.setAttribute('onchange', 'floatEvent(event)');
        return widget;
    }

    toInt(min=0, max=10, step=1) {
        min = toKwarg(min, 0);
        max = toKwarg(max, 10);
        step = toKwarg(step, 1);

        var widget = this._toNumber(min, max, step);
        widget.setAttribute('onchange', 'intEvent(event)');
        return widget;
    }

    toTextArea() {
        /**
            Creates a text area widget
            @function
            @param {string} id - id of widget
            @param {string} value - default value
            @return {textarea} - textarea element
        **/
        var value = toKwarg(this.value, '');
        var widget = document.createElement('textarea');
        widget.id = this.id;
        widget.classList.add('form-control');
        widget.setAttribute('rows', '1');
        widget.value = value;
        return widget;
    }

    toString() {
        /**
            Creates a string editor widget
            @function
            @param {string} id - id of widget
            @param {string} value - default value
            @return {input} - input element
        **/
        var value = toKwarg(this.value, '');
        var widget = document.createElement('input');
        widget.id = this.id;
        widget.classList.add('sidebar-val-input');
        widget.value = value;
        widget.setAttribute('onchange', 'stringEvent(event)');
        return widget;
    }

    toList() {
        /**
            Creates a patternfly multiple select dropdown widget
            @function
            @param {string} id - id of widget
            @param {Array} value - default values
            @return {input} - input element
        **/
        var value = toKwarg(this.value, [1,2,3]);
        var widget = document.createElement('select');
        widget.classList.add('selectpicker');
        widget.multiple = 'multiple';
        widget.id = this.id;
        widget.title = "-";

        for (var i in value) {
            var option = document.createElement('option');
            option.value = value[i];
            option.text = String(value[i]);
            widget.appendChild(option);
        }
        widget.setAttribute('onchange', 'listEvent(event)');
        return widget;
    }

    toComboBox() {
        /**
            Creates a bootstrap combobox dropdown widget
            @function
            @param {string} id - id of widget
            @param {Array} value - default values
            @return {input} - input element
        **/
        var value = toKwarg(this.value, [1,2,3]);
        var widget = document.createElement('select');
        widget.classList.add('combobox');
        widget.classList.add('form-control');
        widget.id = this.id;

        for (var i in value) {
            var option = document.createElement('option');
            option.value = value[i];
            option.text = String(value[i]);
            widget.appendChild(option);
        }
        return widget;
    }

    toBool() {
        /**
            Creates a bootstrap-switch widget
            @function
            @param {string} id - id of widget
            @param {string} value - default value
            @return {input} - switch element
        **/
        var value = toKwarg(this.value, true);
        var widget = document.createElement('input');
        widget.classList.add('bootstrap-switch');
        widget.id = this.id;
        widget.type = 'checkbox';
        widget.checked = value;
        widget.setAttribute('data-on-text', 'TRUE');
        widget.setAttribute('data-off-text', 'FALSE');
        widget.setAttribute('onchange', 'boolEvent(event)');
        return widget;
    }

    toDict() {
        /**
            Creates a jsoneditor widget
            @function
            @param {string} id - id of widget
            @param {object} value - default value
            @return {input} - switch element
        **/
        var value = toKwarg(this.value, {});
        var widget = document.createElement('div');
        widget.classList.add('jsoneditor-container');
        widget.id = this.id;
        widget.value = value;
        return widget;
    }

    infer() {
        /**
            Infers widget from value type;
            @function
            @param {string} id - name of id element
            @param {} value - default value of widget
            @return {string} - id of widget (key in WIDGETS)
        **/
        var id = this.id;
        var value = this.value;

        if (!_.has(this.widgets, id)) {
            var widget = null;

            if (_.isBoolean(value)) {
                widget = this.toBool();

            } else if (_.isInteger(value)) {
                widget = this.toInt();

            } else if (_.isNumber(value)) {
                widget = this.toFloat();

            } else if (_.isString(value)) {
                widget = this.toString();

            } else if (_.isArray(value)) {
                widget = this.toList();

            } else if (_.isObject(value)) {
                widget = this.toDict();
            }
        }
        return widget;
    }
}
