/**
The events.js module is responsible for handling client-side events fired by ui
interactions.
@module events.js
**/
// -----------------------------------------------------------------------------
var API_URL = "{{ api_url }}";

class Request {
    constructor(widget, library, id=null) {
        undefinedError(widget);
        undefinedError(library);

        this._url = API_URL;
        this._library = library;

        // component name to data key lookup table
        this.lut = {
            'arg'      : 'args',
            'attribute': 'attributes',
            'class'    : 'classes',
            'function' : 'functions',
            'kwarg'    : 'kwargs',
            'method'   : 'methods',
            'module'   : 'modules',
            'variable' : 'variables'
        };

        this._setProperties(widget);
        this._data = this._toData(widget, id);
    }

    _setProperties(widget) {
        // set component types
        this.paramType = widget.getAttribute('data-param-type');
        this.objectType = widget.getAttribute('data-object-type');

        // set widget id (ie full context)
        var id = widget.id;
        this.widgetId = id;

        // set param id and name
        id = _.replace(id, '-widget', '');
        var temp = _.split(id, '-');

        // Find module id in this._library
        var modId = null;
        for (var i = temp.length; i > 0; i--) {
            modId = _.join(_.slice(temp, 0, i), '.');
            if (_.includes(this._library.toList(), modId)) {
                break;
            }
        }

        // throw error if modId not in this._library
        if (modId == null) {
            throw('Module ID not found in this._library. Widget ID: ' + widget.id);
        }

        // resolve module
        this.moduleId = modId;
        this.moduleName = _.last(_.split(modId, '.'));

        // resolve class
        var rem = _.slice(temp, i);
        id = this.moduleId;
        if (_.includes(['method', 'attribute'], this.objectType)) {
            this.clsName = _.first(rem);
            id = id + '.' + this.clsName;
            this.clsId = id;
            rem = _.slice(rem, 1);
        }

        // resolve object
        this.objectName = rem[0];
        id = id + '.' + this.objectName;
        this.objectId = id;

        // resolve parameter
        this.paramName = rem[1];
        id = id + '.' + this.paramName;
        this.paramId = id;
    }
    // -------------------------------------------------------------------------

    _toData(widget, id) {
        var lib = this._library;
        var data = {
            'action': 'execute',
            'module': this.moduleId
        };

        data[this.objectType] = this.objectName;

        if (this.clsName != undefined) {
            data['class_'] = this.clsName;
        }

        if (id != null) {
            data['id_'] = id;
        }

        var obj = this.toType('object');

        var args = this._toArgData(obj);
        if (args != null) {
            data['args'] = args;
        }

        var kwargs = this._toKwargData(obj);
        if (kwargs != null) {
            data['kwargs'] = kwargs;
        }

        return data;
    }

    _toArgData(obj) {
        if (_.has(obj, 'args')) {
            var output = [];
            for (var i in obj['args']) {
                var arg = obj['args'][i]['value'];
                output.push(arg);
            }
            return output;
        } else {
            return null;
        }
    }

    _toKwargData(obj) {
        if (_.has(obj, 'kwargs')) {
            var output = {};
            for (var i in obj['kwargs']) {
                var kwarg = obj['kwargs'][i];
                output[kwarg['name']] = kwarg['value'];
            }
            return output;
        } else {
            return null;
        }
    }

    toModule() {
        return this._library.get(this.moduleId);
    }

    toClass() {
        var sel = this.toModule();
        if (this.clsName != undefined) {
            sel = sel['classes'];
            var i = keyToIndex(sel, this.clsName);
            return sel[i];
        }
        throw 'class not found: ' + sel.moduleId;
    }

    toMethod() {
        var sel = this.toClass();
        if (this.objectType != undefined) {
            var oType = this.lut[this.objectType];
            sel = sel[oType];
            var i = keyToIndex(sel, this.objectName);
            return sel[i];
        }
        throw 'method not found: ' + sel.classId;
    }

    toAttribute() {
        var sel = this.toClass();
        if (this.objectType != undefined) {
            var oType = this.lut[this.objectType];
            sel = sel[oType];
            var i = keyToIndex(sel, this.objectName);
            return sel[i];
        }
        throw 'attribute not found: ' + sel.classId;
    }

    toFunction() {
        var sel = this.toModule();
        if (this.objectType != undefined) {
            var oType = this.lut[this.objectType];
            sel = sel[oType];
            var i = keyToIndex(sel, this.objectName);
            return sel[i];
        }
        throw 'function not found: ' + sel.moduleId;
    }


    toParameter() {
        var sel = this.toType('object');
        if (this.paramType != undefined) {
            var pType = this.lut[this.paramType];
            sel = sel[pType];
            var i = keyToIndex(sel, this.paramName);
            return sel[i];
        }
        throw 'parameter not found: ' + sel.objectId;
    }

    toVariable() {
        var sel = this.toModule();
        if (this.objectType != undefined) {
            var oType = this.lut[this.objectType];
            sel = sel[oType];
            var i = keyToIndex(sel, this.objectName);
            return sel[i];
        }
        throw 'variable not found: ' + sel.moduleId;
    }

    toType(type='parameter') {
        if (type == 'module') {
            return this.toModule();;
        }

        if (type == 'class') {
            return this.toClass();
        }

        if (type == 'method') {
            return this.toMethod();
        }

        if (type == 'function') {
            return this.toFunction();
        }

        if (type == 'attribute') {
            return this.toAttribute();
        }

        if (type == 'parameter') {
            return this.toParameter();
        }

        if (type == 'variable') {
            return this.toVariable();
        }

        if (type == 'object') {
            if (this.objectType == 'method') {
                return this.toMethod();

            } else if (this.objectType == 'function') {
                return this.toMethod();

            } else if (this.objectType == 'attribute') {
                return this.toAttribute();

            } else if (this.objectType == 'variable') {
                return this.toVariable();
            }
        }
    }
    // -------------------------------------------------------------------------

    send() {
        var data = JSON.stringify(this._data);
        console.log({'REQUEST': data});

        var response = null;
        function getResponse(http) {
            response = JSON.parse(http.response);
            console.log({'RESPONSE': response});
        }
        return $.post(this._url, data, getResponse);
    }
}
// -----------------------------------------------------------------------------
